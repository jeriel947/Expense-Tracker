Project: Personal Expense Tracker (CLI Edition) ðŸ’°
Goal:
Create a command-line tool that lets you add, view, search, and delete expenses, storing them in a file so the data persists between runs.

Core Features
Add Expense

Input: date, category, description, amount

Store it in a CSV or JSON file

View All Expenses

Display in a table format (e.g., using tabulate or just nicely aligned text)

Search Expenses

By date, category, or amount range

Delete Expense

Remove a specific entry by ID or index

Summary Report

Show total spent per category or total for a given date range

Technical Skills Youâ€™ll Practice
Basic Python I/O: input(), print()

Data Storage: Reading/writing CSV or JSON

Data Structures: Lists, dictionaries

Error Handling: Prevent crashes on invalid inputs

Code Organization: Splitting into functions or even modules

Version Control: Using Git to track progress

Optional Bonus Features (if you want a challenge later)
Add colorful CLI output using colorama

Support command-line arguments using argparse (python tracker.py --add ...)

Export reports to CSV/Excel

Password-protect the tracker with a simple login system

________________________________________________________________________________________________________________________________

Quick summary
MVP (finish in ~1â€“2 days): add, list, delete expenses persisted to a JSON/CSV file.
Phase 2 (1â€“2 days): search, summaries, date ranges.
Polish (2â€“4 days): CLI args, table output, colors, tests, packaging, README.

Step-by-step plan
Step 1 â€” Project setup & barebones in-memory app
Goal: create repo, basic app that stores expenses in memory and supports add + list.
Tasks

Initialize Git repo and create virtualenv.

Create tracker.py (or src/tracker.py) with simple menu using input().

Implement add_expense() â€” append to expenses = [].

Implement list_expenses() â€” print simple list.
Acceptance

Running python tracker.py shows menu, you can add an expense and it appears in the list (but not persisted yet).
Extras

Commit: init: project skeleton and in-memory add/list.

Step 2 â€” Persistence: store data to JSON (MVP storage)
Goal: persist expenses between runs using JSON (or CSV if you prefer).
Tasks

Create data/expenses.json.

Create helper functions: load_expenses() and save_expenses().

Use a simple schema per expense: {"id": 1, "date": "YYYY-MM-DD", "category": "Food", "desc": "lunch", "amount": 150.50}.

Generate incremental id.
Acceptance

Added expenses are written to data/expenses.json and survive program restart.
Tip

Use json module; handle FileNotFoundError by creating an empty list.

Step 3 â€” Improve input validation & error handling
Goal: make inputs robust so app doesn't crash on bad input.
Tasks

Validate date format (use datetime.strptime) and amount (float conversion and >0).

Add try/except for file read/write and show user-friendly errors.

Provide helpful prompts and default values.
Acceptance

Bad date/amount inputs prompt reprompt; file errors show friendly messages, not stack traces.

Step 4 â€” Implement delete and edit operations
Goal: allow deleting an expense by id and editing existing entries.
Tasks

delete_expense(id) â€” confirm deletion before removing.

edit_expense(id) â€” allow changing one or more fields.
Acceptance

You can delete or edit by id; data persists.

Step 5 â€” Add searching and filtering
Goal: let user filter by date, category, or amount range.
Tasks

search_by_category(category) â€” case-insensitive match.

filter_by_date(start_date, end_date) â€” inclusive.

filter_by_amount(min_amount, max_amount).
Acceptance

You can combine filters (e.g., category + date range) and get correct results.

Step 6 â€” Summary reports
Goal: add useful reports (total by category, monthly totals).
Tasks

summary_by_category() â€” aggregate with sum.

summary_by_month() â€” parse date â†’ YYYY-MM, group and sum.

Optionally export summary to CSV.
Acceptance

Running report category prints totals per category; report month prints monthly totals.

Step 7 â€” CLI usability: switch to argparse and commands
Goal: allow non-interactive usage (scripts and shortcuts).
Tasks

Replace menu with argparse subcommands: add, list, delete, search, report.

Example:

python tracker.py add --date 2025-08-12 --category Food --desc "lunch" --amount 150.50

python tracker.py list --start 2025-08-01 --end 2025-08-31
Acceptance

Both interactive and CLI flags work (or at least CLI flags work).
Tip

Use argparse's subparsers.

Step 8 â€” Pretty output (tabular + colors)
Goal: make output readable and portfolio-worthy.
Tasks

Use tabulate (or align manually) to print tables.

Use colorama for success/warning/error colors.
Acceptance

list and report print nice tables and colored messages.

Step 9 â€” Tests and simple CI
Goal: add tests for core logic and set up basic CI.
Tasks

Write unit tests with pytest for functions: load/save, add, delete, summaries.

Add requirements.txt and tox/GitHub Actions workflow to run tests on push.
Acceptance

pytest passes locally; CI runs tests on PRs.

Step 10 â€” Polish and extras (packaging, docs)
Goal: finalize for portfolio and real use.
Tasks

Create README.md with usage examples and screenshots.

Add LICENSE.

Optionally package with pip entry point (setup.cfg or pyproject.toml) so user can install expense-tracker and run expense-tracker add ...

Add optional features: password protection (simple), export to Excel (openpyxl), backup/restore.
Acceptance

Project is documented, tests pass, and usage is simple for others.